#!/usr/bin/env node

var yargs = require('yargs'),
  path = require('path'),
  generator,
  configFile = {},
  configPath,
  KSS_GENERATING = false,
  KSS_FAILED = false,
  generatorConfig,
  version = require(__dirname + '/../package.json').version,
  resolveArray;

/**
 * Applies path.resolve() to the given path or array of paths.
 *
 * @param {string}        from  Optional path to resolve the "to" path
 * @param {string|array}  to    Relative path(s) to resolve.
 *
 * @return An absolute path.
 */
resolveArray = function(from, to) {
  var paths = [];
  // "from" is optional.
  if (typeof to === "undefined") {
    to = from;
    from = '';
  }
  if (to instanceof Array) {
    to.forEach(function(value, index) {
      paths[index] = path.resolve(from, value);
    });
  }
  else {
    paths = path.resolve(from, to);
  }
  return paths;
};

/**
 * Generator configruation.
 * @type {Object}
 */
generatorConfig = yargs
  .usage('Usage: kss-node <source> [destination] [options]')
  .wrap(80)
  .strict()

  .options('init', {
    alias     : 'i',
    describe  : 'Create a new style guide template to customize',
    default   : 'styleguide-template'
  })
  .options('template', {
    string    : true,
    alias     : 't',
    describe  : 'Use a custom template to build your style guide',
    default   : path.relative(process.cwd(), __dirname + '/../generators/handlebars/template')
  })
  .options('helpers', {
    string    : true,
    describe  : 'Specify the location of custom handlebars helpers; see http://bit.ly/kss-helpers',
    default   : path.relative(process.cwd(), __dirname + '/../generators/handlebars/template/helpers')
  })

  .options('mask', {
    string    : true,
    alias     : 'm',
    describe  : 'Use a mask for detecting files containing KSS comments',
    default   : '*.css|*.less|*.sass|*.scss|*.styl|*.stylus'
  })

  .options('css', {
    string    : true,
    describe  : 'Specify the URL of a CSS file to include in the style guide'
  })
  .options('js', {
    string    : true,
    describe  : 'Specify the URL of a JavaScript file to include in the style guide'
  })

  .options('custom', {
    string    : true,
    describe  : 'Process a custom property name when parsing KSS comments'
  })

  .options('base', {
    string    : true,
    describe  : 'Base working directory for inline templates'
  })
  .options('source', {
    string    : true,
    describe  : 'Source directory to parse for KSS comments'
  })
  .options('destination', {
    string    : true,
    describe  : 'Destination directory of generated style guide',
    default   : 'styleguide'
  })

  .config('config')
  .alias('config', 'c')
  .describe('config', 'Load the kss-node configuration from a json file')

  .options('xdemo', {
    boolean   : true,
    // Alias is redundant, but prevents "Unknown argument: xdemo" error.
    alias     : 'xdemo'
  })

  .version(version, 'version')
  .help('help')
  .alias('help', 'h')
  .alias('help', '?')
  .argv;

// Help determine which options are specified in a config json file by loading
// the json file.
if (generatorConfig.config) {
  // Make config paths relative to config file.
  configPath = path.resolve(generatorConfig.config);
  configFile = require(configPath);
  configPath = path.dirname(configPath);
}

// If an option is specified multiple times, yargs will convert it into an
// array. Ensure these options are not an array.
["destination", "template", "helpers"].forEach(function(key) {
  // Only use the first value specified, ignoring the others.
  if (generatorConfig[key] instanceof Array) {
    generatorConfig[key] = generatorConfig[key].pop();
  }
  if (configFile[key] instanceof Array) {
    configFile[key] = configFile[key].pop();
  }
});

// Explicitly check if the --init option was called since generatorConfig.init
// will contain a default value.
if ("init" in yargs.argv || "i" in yargs.argv) {
  // Use the default value if --init is not given a path.
  if (typeof generatorConfig.init === "boolean") {
    generatorConfig.init = 'styleguide-template';
  }
}
else {
  delete generatorConfig.init;
}

// Get the full source path.
if (generatorConfig.xdemo) {
  generatorConfig.source = [__dirname + '/../demo'];
  generatorConfig.css = ['public/styles.css'];
}
else {
  if (!generatorConfig.source) {
    generatorConfig.source = [];
  }
  if (generatorConfig._.length > 0) {
    generatorConfig.source.push(generatorConfig._[0]);
  }
}

// Check if the destination is the second unnamed parameter.
if (!("destination" in yargs.argv) && generatorConfig._.length > 1) {
  generatorConfig.destination = generatorConfig._[1];
}

// Don't use the default value if the helpers option is not specified.
if (!("helpers" in yargs.argv) && !configFile.helpers) {
  generatorConfig.helpers = generatorConfig.template + '/helpers';
}

// Ensure these options are an array.
["source", "custom", "css", "js"].forEach(function(key) {
  if (typeof generatorConfig[key] === "string") {
    generatorConfig[key] = [generatorConfig[key]];
  }
  if (typeof configFile[key] === "string") {
    configFile[key] = [configFile[key]];
  }
});

// Resolve any paths relative to the config file or to the working directory.
["init", "template", "helpers", "base", "source", "destination"].forEach(function(key) {
  if (typeof configFile[key] !== "undefined") {
    generatorConfig[key] = resolveArray(configPath, configFile[key]);
  }
  else if (typeof generatorConfig[key] !== "undefined") {
    generatorConfig[key] = resolveArray(generatorConfig[key]);
  }
});

// Copy config that we need in the generator
["css", "js"].forEach(function(key) {
  if (typeof configFile[key] !== "undefined") {
    generatorConfig[key] = configFile[key];
  }
});

// Set up error handling.
process.on('exit', function() {
  if (KSS_GENERATING && !KSS_FAILED) {
    console.log('');
    console.log('Generation completed successfully!');
    console.log('');
  }
});

process.on('uncaughtException', function(err) {
  if (KSS_GENERATING) {
    console.log('\nError during generation\n');
  }
  console.log(err);

  KSS_FAILED = true;
  process.exit(1);
});


// If no source is specified, display help and exit.
if (!generatorConfig.source.length && !generatorConfig.init) {
  console.log('Error: No --source specified.');
  console.log('');
  yargs.showHelp();
  return;
}

// Load the template's generator.
try {
  // @TODO: See NOTE 1 below.
  generator = require(generatorConfig.template).generator;
} catch (e) {
  // Templates don't have to load their own generator. If the template fails to
  // load a generator, we assume it wanted the default generator.
  generator = require('../generators/handlebars');
}

// Confirm this is a compatible generator.
generator.checkGenerator();

// If requested, clone a template and exit.
if (generatorConfig.init) {
  console.log('Creating a new style guide template...');

  generator.clone(generatorConfig.template, generatorConfig.init);

  console.log('You can change it as you like, and use it with your style guide like so:');
  console.log('');
  console.log('kss-node [sourcedir] --template ' + generatorConfig.init);
  console.log('');
  return;
}

// Initialize the generator.
generator.init(generatorConfig);

// Parse and generate the static HTML pages in the next tick.
process.nextTick(function() {
  KSS_GENERATING = true;

  // We use a closure so we can use the generator object's methods and
  // properties when generator.generate() is used as a callback.
  generator.parse(
    (function(object) {
      return function() {
        object.generate.apply(object, arguments);
      };
    })(generator)
  );
});

// NOTE 1: This require() line will always fail while testing a git clone of
// this module. In order for a bundled template to be "clone"-able, it must use
// the require('kss/generators/path') syntax (instead of the requiring a
// relative path). Thus, when requiring its generator, the template will throw
// an error since this kss module has been git cloned and not installed via npm.
// This limitation will need to be fixed if additional generators are added to
// the module.
