#!/usr/bin/env node

var kss = require(__dirname + '/../lib/kss.js'),
	preCompiler = kss.precompilers,
	handlebars = require('handlebars'),
	cleanCss = require('clean-css'),
	optimist = require('optimist'),
	marked = require('marked'),
	wrench = require('wrench'),
	stylus = require('stylus'),
	async = require('async'),
	util = require('util'),
	less = require('less'),
	path = require('path'),
	fs = require('fs'),
	template, styleguide,
	generatePage, generateStylesheet,
	options = {
		templateDirectory: __dirname + '/../lib/template',
		sourceDirectory: __dirname + '/../demo',
		destinationDirectory: process.cwd() + '/styleguide'
	},
	KSS_FAILED = false,	argv;

/**
 * CLI argument parsing, thanks to Substack's optimist.
 * @type {Object}
 */
argv = require('optimist')
	.usage('Usage:\n $0 sourcedir [destdir] --init [directory] --{style,less,sass,stylus} [file]')
	.check(function(args) {
		if (args._.length < 1 && !args.init) {
			throw new Error('Please provide a source directory');
		}
	})

	.string('t')
	.alias('t', 'template')
	.describe('t', 'Use a custom template to build your styleguide')

	.string('s')
	.alias('s', 'style')
	.describe('s', 'Compile and include a stylesheet - the precompiler is chosen based on file extension')

	.string('l')
	.alias('l', 'less')
	.describe('l', 'Compile and include a LESS stylesheet')

	.string('y')
	.alias('y', 'stylus')
	.describe('y', 'Compile and include a Stylus stylesheet')

	.string('S')
	.alias('S', 'sass')
	.describe('S', 'Compile and include a SASS stylesheet')

	.string('c')
	.alias('c', 'css')
	.describe('c', 'Compile and include a CSS stylesheet')

	.string('m')
	.alias('m', 'mask')
	.describe('m', 'Use a custom mask for detecting stylesheets, e.g. "*.css"')

	.alias('i', 'init')
	.describe('i', 'Create a new styleguide template to work from')

	.alias('i', 'init')
	.describe('i', 'Create a new styleguide template to work from')

	.argv;

// Create a new styleguide template to play with using the `--init` tag.
if (argv.init) {
	if (typeof argv.init !== 'string') {
		argv.init = path.resolve('./styleguide-template');
	} else {
		argv.init = path.resolve(argv.init);
	}

	console.log('Creating a new styleguide template...');
	wrench.copyDirSyncRecursive( __dirname + '/../lib/template', argv.init );
	console.log('You can change it as you like, and use it with your styleguide like so:');
	console.log('');
	console.log('kss-node [sourcedir] --template "'+argv.init+'"');
	console.log('');
	return;
}

options.sourceDirectory = path.relative(process.cwd(), argv['_'][0]);
if (argv['_'].length > 1) {
	options.destinationDirectory = path.relative(process.cwd(), argv['_'][1]);
}
if (argv.template) {
	options.templateDirectory = path.relative(process.cwd(), argv.template);
}

console.log('');
console.log('Generating your KSS Styleguide!');
console.log('');
console.log(' * Source: ' + path.resolve(options.sourceDirectory));
console.log(' * Destination: ' + path.resolve(options.destinationDirectory));
console.log(' * Template: ' + path.resolve(options.templateDirectory));
console.log('');

// Compile the Handlebars template
template = fs.readFileSync(options.templateDirectory + '/index.html', 'utf8');
template = handlebars.compile(template);

// Create a new "styleguide" directory and copy the contents
// of "public" over.
try {
	fs.mkdirSync(options.destinationDirectory);
} catch (e) {}

wrench.copyDirSyncRecursive(
	options.templateDirectory + '/public',
	options.destinationDirectory + '/public'
);

// Generate the static HTML pages in the next tick, i.e. after the other functions have
// been defined and handlebars helpers set up.
process.nextTick(function() {

	// Compile the KSS docs stylesheets before generating the templates.
	// A KSS stylesheet can be: kss.less, kss.scss or kss.sass
	compileKssStylesheet(function() {
		generateTemplates();
	});
});

// Compile the KSS stylesheet used by the generated templates
compileKssStylesheet = function(callback) {

	// Search for a KSS preprocessor to compile
	var stylesheetPath = path.relative(process.cwd(), options.destinationDirectory) + '/public/kss.';
	var preprocessors = ['sass', 'scss', 'less'];
  var foundPreCompiler = false;

	for(var i = 0, l = preprocessors.length; i < l; i++) {

		var preprocessorPath = stylesheetPath + preprocessors[i];

		if (!fs.existsSync(preprocessorPath)) {
			continue;
		}

    foundPreCompiler = true;

		console.log('...compiling KSS styles');
		console.log(' - ' + preprocessorPath);

		// Compile the stylesheet
		preCompiler.compilers[preprocessors[i]].render(preprocessorPath, function(err, css) {

			if (err) {
				console.error(err);
				throw err;
			}

			css = cleanCss.process(css);

			// Write the compiled styles
			fs.writeFileSync(options.destinationDirectory + '/public/kss.css', css, 'utf8');

			if (callback) {
				callback();
			}
		});

		break;
	}

  if (!foundPreCompiler) {
    console.info('Could not compile docs stylesheet. KSS source file not found.\n');
    callback();
  }
}

// Generate the docs HTML files
generateTemplates = function() {

	console.log('...parsing your styleguide');

	kss.traverse(options.sourceDirectory, {
		multiline : true,
		markdown  : true,
		markup    : true,
		mask      : argv.mask || preCompiler.mask
	}, function(err, sg) {
		if (err) throw err

		styleguide = sg;

		var sections = styleguide.section('*.'),
			i, sectionCount = sections.length,
			sectionRoots = [], currentRoot,
			rootCount, childSections = [],
			pages = {};

		console.log(sg.data.files.map(function(file) {
			return ' - ' + file
		}).join('\n'))

		// Accumulate all of the sections' first indexes
		// in case they don't have a root element.
		for (i = 0; i < sectionCount; i += 1) {
			currentRoot = sections[i].reference().match(/[0-9]*\.?/)[0].replace('.', '');

			if (!~sectionRoots.indexOf(currentRoot)) {
				sectionRoots.push(currentRoot);
			}
		}

		sectionRoots.sort();
		rootCount = sectionRoots.length;

		// Now, group all of the sections by their root
		// reference, and make a page for each.
		for (i = 0; i < rootCount; i += 1) {
			childSections = styleguide.section(sectionRoots[i]+'.*');

			generatePage(
				styleguide, childSections,
				sectionRoots[i], pages, sectionRoots
			);
		}

		generateIndex(styleguide, childSections, pages, sectionRoots);
		generateStylesheet(argv);
	});
}

// Compile LESS/Stylus/CSS files into a single "style.css" if required
generateStylesheet = function(argv) {
	var compilers = preCompiler.compilers,
		files

	console.log('...compiling additional stylesheets');

	files = [ false, 'less', 'stylus', 'sass', 'scss', 'css' ].map(function (type) {
		var key = type || 'style';

		if (!argv[key]) return;

		return {
			  files: Array.isArray(argv[key]) ? argv[key] : [argv[key]]
			, type: type
		};
	});

	async.reduce(files, [], function (combined, group, next) {
		if (!group) return next(null, combined)


		async.map(group.files, function (filename, next) {

			var type = group.type
			  , extension

			// Type-guessing for --style option
			if (!type) {
				extension = path.extname(filename).slice(1)
				Object.keys(compilers).forEach(function(name) {
					if (compilers[name].extensions.indexOf(extension) !== -1) type = name
				})
				type = type || 'css'
			}

			type = type.toLowerCase()
			console.log(' - ' + filename + ' (' + type + ')')

			if (type === 'css') return next(null, fs.readFileSync(filename, 'utf8'))
			compilers[type].render(filename, next)

		}, function(err, output) {
			if (err) return next(err)
			combined += '\n'
			combined += output.join('\n')
			return next(null, combined)
		});
	}, function (err, combined) {
		if (err) throw err
		saveStylesheet(combined)
	});
};

// Used by generateStylesheet to minify and then
// save its final buffer to a single CSS file.
saveStylesheet = function(buffer) {
	buffer = cleanCss.process(buffer.toString());
	fs.writeFileSync(
		options.destinationDirectory + '/public/style.css',
		buffer, 'utf8'
	);
};

// Renders the handlebars template for a section and saves it to a file.
// Needs refactoring for clarity.
generatePage = function(styleguide, sections, root, pages, sectionRoots) {
	console.log(
		'...generating section '+root+' [',
		styleguide.section(root) ? styleguide.section(root).header() : 'Unnamed',
		']'
	);
	fs.writeFileSync(options.destinationDirectory + '/section-'+root+'.html',
		template({
			styleguide: styleguide,
			sections: jsonSections(sections),
			rootNumber: root,
			sectionRoots: sectionRoots,
			overview: false,
			argv: argv || {}
		})
	);
};

// Equivalent to generatePage, however will take `styleguide.md` and render it
// using first Markdown and then Handlebars
generateIndex = function(styleguide, sections, pages, sectionRoots) {
	try {
		console.log('...generating styleguide overview');
		fs.writeFileSync(options.destinationDirectory + '/index.html',
			template({
				styleguide: styleguide,
				sectionRoots: sectionRoots,
				sections: jsonSections(sections),
				rootNumber: 0,
				argv: argv || {},
				overview: marked(fs.readFileSync(options.sourceDirectory + '/styleguide.md', 'utf8'))
			})
		);
	} catch(e) {
		console.log('...no styleguide overview generated:', e.message);
	}
};

// Convert an array of `KssSection` instances to a JSON object.
jsonSections = function(sections) {
	return sections.map(function(section) {
		return {
			header: section.header(),
			description: section.description(),
			reference: section.reference(),
			depth: section.data.refDepth,
			deprecated: section.deprecated(),
			experimental: section.experimental(),
			modifiers: jsonModifiers(section.modifiers())
		};
	});
};

// Convert an array of `KssModifier` instances to a JSON object.
jsonModifiers = function(modifiers) {
	return modifiers.map(function(modifier) {
		return {
			name: modifier.name(),
			description: modifier.description(),
			className: modifier.className()
		};
	});
};

/**
 * Equivalent to the {#if} block helper with multiple arguments.
 */
handlebars.registerHelper('ifAny', function() {
	var argLength = arguments.length - 2,
		content = arguments[argLength + 1],
		success = true;

	for (var i = 0; i < argLength; i += 1) {
		if (!arguments[i]) {
			success = false;
			break;
		}
	}

	return success ? content(this) : content.inverse(this);
});

/**
 * Returns a single section, found by its reference number
 * @param  {String|Number} reference The reference number to search for.
 */
handlebars.registerHelper('section', function(reference) {
	var section = styleguide.section(reference);
	if (!section) return false;

	return arguments[arguments.length-1](section.data);
});

/**
 * Loop over a section query. If a number is supplied, will convert into
 * a query for all children and descendants of that reference.
 * @param  {Mixed} query The section query
 */
handlebars.registerHelper('eachSection', function(query) {
	var sections,
		i, l, buffer = "";

	if (!query.match(/x|\*/g)) {
		query = new RegExp('^' + query + '$|^' + query + "\\..*");
	}
	sections = styleguide.section(query);
	if (!sections) return '';

	l = sections.length;
	for (i = 0; i < l; i += 1) {
		buffer += arguments[arguments.length-1](sections[i].data);
	}

	return buffer;
});

/**
 * Loop over each section root, i.e. each section only one level deep.
 */
handlebars.registerHelper('eachRoot', function() {
	var sections,
		i, l, buffer = "";

	sections = styleguide.section('x');
	if (!sections) return '';

	l = sections.length;
	for (i = 0; i < l; i += 1) {
		buffer += arguments[arguments.length-1](sections[i].data);
	}

	return buffer;
});

/**
 * Equivalent to "if the current section is X levels deep". e.g:
 *
 * {{#refDepth 1}}
 * 	 ROOT ELEMENTS ONLY
 * 	{{else}}
 * 	 ANYTHING ELSE
 * {{/refDepth}}
 */
handlebars.registerHelper('whenDepth', function(depth, context) {
	if (!(context && this.refDepth)) {
		return '';
	}
	if (depth == this.refDepth) {
		return context(this);
	}
	if (context.inverse) {
		return context.inverse(this);
	}
});

/**
 * Similar to the {#eachSection} helper, however will loop over each modifier
 * @param  {Object} section Supply a section object to loop over it's modifiers. Defaults to the current section.
 */
handlebars.registerHelper('eachModifier', function(section) {
	var modifiers, i, l, buffer = '';

	// Default to current modifiers, but allow supplying a custom section
	if (section.data) modifiers = section.data.modifiers;
	modifiers = modifiers || this.modifiers || false;

	if (!modifiers) return {};

	l = modifiers.length;
	for (i = 0; i < l; i++) {
		buffer += arguments[arguments.length-1](modifiers[i].data || '');
	}
	return buffer;
});

/**
 * Outputs a modifier's markup, if possible.
 * @param  {Object} modifier Specify a particular modifier object. Defaults to the current modifier.
 */
handlebars.registerHelper('modifierMarkup', function(modifier) {
	modifier = arguments.length < 2 ? this : modifier || this || false;

	if (!modifier) {
		return false;
	}

	// Maybe it's actually a section?
	if (modifier.modifiers) {
		return new handlebars.SafeString(
			modifier.markup
		);
	}

	// Otherwise return the modifier markup
	return new handlebars.SafeString(
		new kss.KssModifier(modifier).markup()
	);
});

/**
 * Quickly avoid escaping strings
 * @param  {String} arg The unescaped HTML
 */
handlebars.registerHelper('html', function(arg) {
	return new handlebars.SafeString(arg || '');
});

process.on('exit', function() {
	if (!KSS_FAILED) {
		console.log('');
		console.log('Generation completed successfully!');
		console.log('');
	}
});

process.on('uncaughtException', function(err) {
	console.log(err.message);
	console.log(err.stack);
	KSS_FAILED = true;
	process.exit(1);
})
